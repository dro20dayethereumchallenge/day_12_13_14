sudo apt-get update
sudo apt-get install -y ca-certificates curl gnupg
sudo mkdir -p /etc/apt/keyrings
curl -fsSL https://deb.nodesource.com/gpgkey/nodesource-repo.gpg.key | sudo gpg --dearmor -o /etc/apt/keyrings/nodesource.gpg
NODE_MAJOR=22
echo "deb [signed-by=/etc/apt/keyrings/nodesource.gpg] https://deb.nodesource.com/node_$NODE_MAJOR.x nodistro main" | sudo tee /etc/apt/sources.list.d/nodesource.list
sudo apt-get update
sudo apt-get install nodejs -y
npm install web3
npm install --save-dev @nomiclabs/hardhat-ethers ethers @nomiclabs/hardhat-waffle ethereum-waffle chai
npm i @openzeppelin/contracts@4.5.0



npx create-react-app fund
cd fund


## you can run react 'hello world' as a starting test ...
npm start
# set your inbound rule appropriately
# set a tap to     <dns-from-aws-console>:3000
# "hello world" should now show up!


npx hardhat init

# double check dns
vi hardhat.config.js


cd contracts 

# under: 
ubuntu@ip-172-31-43-71:~/fund$ pwd
/home/ubuntu/fund



rm Lock.sol
vi Fundraiser.sol
vi FundraiserFactory.sol



# double check dns
vi src/App.js
vi src/ 

ubuntu@ip-172-31-43-71:~/fund/src$ mkdir components
ubuntu@ip-172-31-43-71:~/fund/src$ cd components
ubuntu@ip-172-31-43-71:~/fund/src/components$ ls
ubuntu@ip-172-31-43-71:~/fund/src/components$ mkdir ui
ubuntu@ip-172-31-43-71:~/fund/src/components$ cd ui
ubuntu@ip-172-31-43-71:~/fund/src/components/ui$ vi card.jsx


# from project directory
ubuntu@ip-172-31-43-71:~/fund$ pwd
/home/ubuntu/fund
mkdir scripts       
vi scripts/deploy.js





vi Fundraiser.sol


import "@openzeppelin/contracts/access/Ownable.sol";
import "@openzeppelin/contracts/utils/math/SafeMath.sol";

contract Fundraiser is Ownable {
    using SafeMath for uint256;

    struct Donation {
        uint256 value;
        uint256 date;
    }
    mapping(address => Donation[]) private _donations;

    event DonationReceived(address indexed donor, uint256 value);
    event Withdraw(uint256 amount);

    string public name = "me";
    string public url = "http";
    string public imageURL = "junk.png";
    string public description = "test";

    address payable public beneficiary;

    address private _owner;

    uint256 public totalDonations;
    uint256 public donationsCount;

    constructor(
        string memory _name,
        string memory _url,
        string memory _imageURL,
        string memory _description,
        address payable _beneficiary,
        address _custodian
    )
        public
    {
        name = _name;
        url  = _url;
        imageURL = _imageURL;
        description = _description;
        beneficiary = _beneficiary;
        _owner = _custodian;
    }
    function setBeneficiary(address payable _beneficiary) public onlyOwner {
        beneficiary = _beneficiary;
    }

    function myDonationsCount() public view returns(uint256) {
        return _donations[msg.sender].length;
    }

    function donate() public payable {
        Donation memory donation = Donation({
            value: msg.value,
            date: block.timestamp
        });
        _donations[msg.sender].push(donation);
        totalDonations = totalDonations.add(msg.value);
        donationsCount++;

        emit DonationReceived(msg.sender, msg.value);
    }
    function myDonations() public view returns(
        uint256[] memory values,
        uint256[] memory dates
    )
    {
        uint256 count = myDonationsCount();
        values = new uint256[](count);
        dates = new uint256[](count);

        for (uint256 i = 0; i < count; i++) {
            Donation storage donation = _donations[msg.sender][i];
            values[i] = donation.value;
            dates[i] = donation.date;
        }

        return (values, dates);
    }

    function withdraw() public onlyOwner {
        uint256 balance = address(this).balance;
        beneficiary.transfer(balance);
        emit Withdraw(balance);
    }

    function receiveFunds() external payable {
        totalDonations = totalDonations.add(msg.value);
        donationsCount++;
    }
}




## images for exmample as served from the react site - not externally as in Oreilly example
## 


ubuntu@ip-172-31-34-73:~/fund$ npx hardhat node --hostname <dns>


####e.g.
####ubuntu@ip-172-31-34-73:~/fund$ npx hardhat node --hostname ec2-34-212-243-20.us-west-2.compute.amazonaws.com


npx hardhat console


> const signers = await ethers.getSigners();
undefined
> const contract =  await ethers.getContractFactory("Fundraiser")

> const name =  "Beneficiary Name";
undefined
> name
'Beneficiary Name'
>   const url = "beneficiaryname.org";
undefined
>   const imageURL = "https://placekitten.com/600/350";
undefined
>   const description = "Beneficiary description";
undefined
>  const beneficiary = signers[1];
undefined
> const owner = signers[0];
undefined
> const fundraiser = await contract.deploy(name,url,imageURL,description, beneficiary, owner);
undefined
> await fundraiser.name()
'Beneficiary Name'
> await fundraiser.url()
'beneficiaryname.org'
> await fundraiser.imageURL()
'https://placekitten.com/600/350'
> await fundraiser.description()
'Beneficiary description'
> await fundraiser.beneficiary()
'0x70997970C51812dc3A010C7d01b50e0d17dc79C8'
> await fundraiser.owner()
'0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266'
>
> const currentDonationsCount = await fundraiser.myDonationsCount({from: signers[0]});
undefined
> currentDonationsCount
0n
> const value1 = await ethers.parseUnits('0.0289','ether')

> value1
28900000000000000n

>await fundraiser.donate({from: signers[0], value: value1});

> const value2 = await ethers.parseUnits('1.0', 'ether')
undefined
> value2
1000000000000000000n
>

> await fundraiser.donate({from: signers[0], value: value2});

> const currentDonationsCount2 = await fundraiser.myDonationsCount({from: signers[0]});
undefined
> currentDonationsCount2
2n
>
const {values, dates} = await fundraiser.myDonations({from: signers[0]} );


>       const {values, dates} = await fundraiser.myDonations({from: signers[0]} );
undefined
> values
[Function (anonymous)]
> await values
[Function (anonymous)]
> dates
Result(2) [ 1749236782n, 1749236802n ]

> await fundraiser.myDonations({from: signers[0]} );
Result(2) [
  Result(2) [ 28900000000000000n, 1000000000000000000n ],
  Result(2) [ 1753819164n, 1753819193n ]
]
>


>   const newBeneficiary = signers[2];

>   await fundraiser.setBeneficiary(newBeneficiary, {from: signers[0]});

>   const newBeneficiary = signers[2];

>   const actualBeneficiary = await fundraiser.beneficiary();
undefined
> actualBeneficiary
'0x3C44CdDdB6a900fa2b585dd299e03d12FA4293BC'
>
> signers[2].address
'0x3C44CdDdB6a900fa2b585dd299e03d12FA4293BC'


vi FundraiserFactory.sol

pragma solidity ^0.8.0;

import "./Fundraiser.sol";

contract FundraiserFactory {
   uint256 constant maxLimit = 20;
   Fundraiser[] private _fundraisers;
   string public storedData;
   event FundraiserCreated(Fundraiser indexed fundraiser, address indexed owner);

    function createFundraiser(
        string memory name,
        string memory url,
        string memory imageURL,
        string memory description,
        address payable beneficiary
    )
        public
    {
   Fundraiser fundraiser = new Fundraiser(
            name,
            url,
            imageURL,
            description,
            beneficiary,
            msg.sender
        );
        _fundraisers.push(fundraiser);
        emit FundraiserCreated(fundraiser, msg.sender);
    }

function fundraisersCount() public view returns(uint256) {
        return _fundraisers.length;
    }

    function fundraisers(uint256 limit, uint256 offset)
        public
        view
        returns(Fundraiser[] memory coll)
    {
        require(offset <= fundraisersCount(), "offset out of bounds");

        uint256 size = fundraisersCount() - offset;
        size = size < limit ? size : limit;
        size = size < maxLimit ? size : maxLimit;
        coll = new Fundraiser[](size);

        for(uint256 i = 0; i < size; i++) {
            coll[i] = _fundraisers[offset + i];
        }

        return coll;
    }
function getFundraiserAt(uint index) public view returns (Fundraiser) {
    return _fundraisers[index];
}





}



ubuntu@ip-172-31-34-73:~/fund$ npx hardhat console
Welcome to Node.js v22.16.0.
Type ".help" for more information.
> const signers = await ethers.getSigners();
undefined
> const name =  "Beneficiary Name";
undefined
> const url = "beneficiaryname.org";
undefined
> const imageURL = "https://placekitten.com/600/350";
undefined
> const description = "Beneficiary description";
undefined
> const contract2 =  await ethers.getContractFactory("FundraiserFactory")
undefined
> const fundraiserfactory = await contract2.deploy();
undefined

>  const beneficiary = signers[1];
> const fundraisers1 = await fundraiserfactory.createFundraiser(name, url, imageURL, description,beneficiary)
undefined
> await fundraiserfactory.fundraisersCount()
1n
> const fundraiserAddr = await fundraiserfactory.getFundraiserAt(0);
undefined
> const Fundraiser = await ethers.getContractFactory("Fundraiser");
undefined
> const fundraiser = Fundraiser.attach(fundraiserAddr);
undefined
> await fundraiser.name()
'Beneficiary Name'





cd test
vi ff.js

npx hardhat test



# day 14 content!
# note: to run our (final) application: I perform a single deployment - however, i rely on the same script in order to support the gneeration
# of the contract definition ( ABI ) for the fundraiser so it can be referenced appropriately from the application
# to this puropse i do the two deployment scripts: 

#deploy1.js 
#deploy2.js

#however in in the final version I do not rely on the deployment of the 'fundraiser' remember the fundraiserfactory will perform that but to suppport
#running both version of the App.js ( one for a single fundraiser and the final version for the factory ) 







